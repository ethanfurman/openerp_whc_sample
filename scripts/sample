#!/usr/bin/env python
from __future__ import print_function

from antipathy import Path
from openerplib import get_connection, get_records, AttrDict, Query
from scription import *
import dbf
import os

virtualenv = os.environ['VIRTUAL_ENV']
CONFIG = Path('%s/config/fnx.ini' % virtualenv)


try:
    settings = OrmFile(CONFIG)
except Exception:
    print('WARNING: unable to process configfile; all parameters must be specified', verbose=0)
    HOST = ''
    USER = ''
    DB = ''
    PW = ''
else:
    HOST = settings.openerp.host
    USER = settings.openerp.user
    DB = settings.openerp.db
    PW = settings.openerp.pw

@Script(
        host=Spec('host where OpenERP instance is running', OPTION, default=HOST),
        db=Spec('database to use', OPTION, default=DB),
        user=Spec('login name to use', OPTION, default=USER),
        pw=Spec('password for login name', OPTION),
        )
def main(host, db, user, pw):
    if host:
        module.HOST = host
    if db:
        module.DB = db
    if user:
        module.USER = user
    if pw:
        module.PW = pw
    for req in ('HOST', 'USER', 'DB', 'PW'):
        if not module[req]:
            raise SystemExit('%r required; use --help for more info' % req)

@Command()
def sample_update():
    Path.chdir('/home/ethan/Access_transfer')
    echo('rsync')
    job = Execute('/usr/bin/rsync root@192.168.2.200:/mnt/virtualxp/Sample_memo_db.20161205.mdb /home/ethan/Access_transfer/ -v', pty=True, password=settings.network.pw)
    echo(job.stdout)
    echo(job.stderr)
    echo('convert')
    job = Execute('/home/ethan/Access_transfer/convert initial sample Sample_memo_db.20161205.mdb')
    echo(job.stdout)
    echo(job.stderr)
    Path.chdir('/home/ethan/Access_transfer/converting')
    echo('stage 1')
    job = Execute('/home/ethan/Access_transfer/converting/Sample_memo_db_stage1 next-stage')
    echo(job.stdout)
    echo(job.stderr)
    echo('stage 2')
    job = Execute('/home/ethan/Access_transfer/converting/Sample_memo_db_stage2 next-stage')
    echo(job.stdout)
    echo(job.stderr)
    Path.chdir('/opt/openerp/openerp/addons/sample/scripts')
    echo('from-access')
    job = Execute('/opt/openerp/openerp/addons/sample/scripts/sample from-access --host=192.168.2.243 --db=wholeherb -v')
    echo(job.stdout)
    echo(job.stderr)

@Command()
def from_access():
    "imports historical sample requests from Access database"
    base = Path('/home/ethan/Access_transfer/converting/Sample_memo_db_')
    # customer w/main information
    customer = base + 'Customers_stage3'
    # requests with shipping information (link to customer)
    requests = base + 'Sample_Memo_stage3'
    # products and lot #s (link to requests)
    product_lot = base + 'Samples_Requested_stage3'
    #
    connect_oe()
    #
    # add customers first (which means get existing customers first)
    #
    print('loading OpenERP customers')
    oe_customers = dict([
        (r.xml_id, r)
        for r in get_records(
                OE.res_partner,
                domain=[('customer','=',True),('xml_id','!=',False),('module','=','CSMS')],
                fields=['id','xml_id','child_ids'],
                context={'active_test': False},
                )])
    print('adding Access customers')
    with dbf.Table(customer, dbf_type='clp', default_data_types='enhanced') as customer:
        for rec in customer:
            if dbf.recno(rec) == 1:
                continue
            if rec.company in ('New Customer', 'New Lab'):
                continue
            if not rec.company:
                continue
            xml_id = ('00000' + rec.xml_id)[-6:]
            if xml_id not in oe_customers:
                city, state_id, country_id = csc(rec.city, rec.state, rec.country)
                # better add it
                new_id = OE.res_partner.create({
                    'xml_id': xml_id,
                    'module': 'CSMS',
                    'name': rec.company,
                    'is_company': True,
                    'customer': True,
                    'phone': rec.phone,
                    'street': rec.street,
                    'city': city,
                    'state_id': state_id,
                    'zip': rec.postal,
                    'country_id': country_id,
                    })
                oe_customers[xml_id] = AttrDict({'id': new_id, 'xml_id': xml_id, 'child_ids':[]})
                if rec.contact and rec.contact != '-':
                    existing_contacts = oe_customers[xml_id].child_ids
                    for contact in existing_contacts:
                        if rec.contact == contact.name:
                            break
                    else:
                        # did not find a match, so add it
                        OE.res_partner.create({
                            'name': rec.contact,
                            'parent_id': new_id,
                            })
    #
    # now add sample requests
    #
    print('getting OpenERP contacts')
    oe_contacts = dict([
        ((r.parent_id and r.parent_id.id,r.name), r)
        for r in get_records(
                OE.res_partner,
                domain=[('is_company','=',False)],
                fields=['id','name','parent_id','phone'],
                context={'active_test': False},
                )])
    # needs_restoring = (id, phone, really?)
    needs_restoring = {}
    print('getting OpenERP sales people')
    sales_people = dict([
        (r.name.lower(), r.id)
        for r in get_records(
            OE.res_users,
            fields=['id','name'],
            context={'active_test': False},
            )])
    print('getting OpenERP shipping methods')
    shipping_methods = dict([
        (s.name.lower(), s.id)
        for s in get_records(
            OE.sample_shipping,
            fields=['id','name'],
            context={'active_test': False},
            )])
    print('loading OpenERP sample memos')
    existing_requests = set([
        r.ref_num
        for r in get_records(
            OE.sample_request,
            fields=['id','ref_num'],
            )])
    print('adding Access sample memos')
    with dbf.Table(requests, dbf_type='clp', default_data_types='enhanced') as requests:
        # just process 2017+ for now
        for rec in requests:
            if dbf.recno(rec) == 1:
                continue
            if not rec.orderdate.startswith(('2018', '2019', )):
                continue
            if rec.order_id in existing_requests:
                continue
            # but add salespeople first
            if not rec.salesman:
                salesman_id = False
            else:
                salesman_id = sales_people.get(rec.salesman.lower())
                if salesman_id is None:
                    salesman_id = OE.res_users.create({
                        'name': rec.salesman,
                        'login': '_'.join(rec.salesman.lower().split()),
                        'active': False,
                        })
                    sales_people[rec.salesman.lower()] = salesman_id
            # and add shipping method first
            if not rec.shipping:
                shipping_id = False
            else:
                shipping_id = shipping_methods.get(rec.shipping.lower())
                if shipping_id is None:
                    shipping_id = OE.sample_shipping.create({
                        'name': rec.shipping,
                        })
                    shipping_methods[rec.shipping.lower()] = shipping_id
            # add/update contact first
            if not rec.s_contact:
                contact_id = False
                company_id = False
            else:
                try:
                    xml_id = ('00000'+rec.cust_id)[-6:]
                    company = oe_customers[xml_id]
                    company_id = company.id
                    lead_id = None
                except KeyError:
                    # add as a lead
                    city, state_id, country_id = csc(rec.s_city, rec.s_state, rec.s_country)
                    lead_id = OE.crm_lead.create({
                        'user_id': salesman_id,
                        'name': rec.s_company.upper() or 'Sample ' + rec.order_id,
                        'partner_name': rec.s_company or False,
                        'contact_name': rec.s_contact or False,
                        'phone': rec.s_phone or False,
                        'street': rec.s_address or False,
                        'city': city,
                        'state_id': state_id,
                        'zip': rec.s_postal,
                        'country_id': country_id,
                        })
                else:
                    if rec.s_contact:
                        # child_ids is a list of ids
                        existing_contacts = oe_customers[xml_id].child_ids
                        for contact_id in existing_contacts:
                            # if rec.s_contact == contact.name:
                            if (company_id, rec.s_contact) in oe_contacts:
                                # get contact record
                                contact = oe_contacts[company_id, rec.s_contact]
                                contact_id = contact.id
                                if rec.s_phone != contact.phone:
                                    if (company_id, contact.name) not in needs_restoring:
                                        needs_restoring[company_id, contact.name] = (contact.id, contact.phone, True)
                                    OE.res_partner.write(contact.id, {'phone': rec.s_phone})
                                break
                        else:
                            # did not find a match, so add it
                            contact_id = OE.res_partner.create({
                                'name': rec.s_contact,
                                'parent_id': company_id,
                                'phone': rec.s_phone,
                                })
                            oe_contacts[company_id, rec.s_contact] = AttrDict(
                                    name=rec.s_contact,
                                    parent_id=company_id,
                                    phone=rec.s_phone,
                                    id=contact_id,
                                    )
                            oe_customers[xml_id].child_ids.append(contact_id)
                            needs_restoring[company_id, rec.s_contact] = (contact_id, rec.s_phone, False)
            # finally, add request
            if rec.order_id not in existing_requests:
                label = [rec[f] for f in ('s_contact', 's_company', 's_address') if f]
                csz = ''
                if rec.s_city:
                    csz += rec.s_city
                if rec.s_state:
                    if csz:
                        csz += ', ' + rec.s_state
                    else:
                        csz = rec.s_state
                if rec.s_postal:
                    if csz:
                        csz += '  ' + rec.s_postal
                    else:
                        csz = rec.s_postal
                label.append(csz)
                if rec.s_country and rec.s_country != 'USA':
                    label.append(rec.s_country.upper())
                comments = rec.comments or False
                if comments:
                    comments = comments.replace('\\n','\n')
                request_values = {
                    'ref_num': rec.order_id,
                    'user_id': salesman_id or 1,
                    'create_date': rec.orderdate,
                    'address': '\n'.join(label) or False,
                    'request_ship': shipping_id,
                    'ship_date': rec.ship_date or False,
                    'comments': rec.comments or False,
                    # 'state': 'complete',
                    'is_historical': True,
                    }
                if lead_id is None:
                    request_values['partner_id'] = company_id
                    request_values['contact_id'] = contact_id
                else:
                    request_values['lead_id'] = lead_id
                    request_values['request_type'] = 'lead'
                OE.sample_request.create(request_values)
                existing_requests.add(rec.order_id)
    #
    # adding products
    #
    print('getting products')
    tmp_product = get_records(
            OE.product,
            fields=['id','xml_id','name'],
            context={'active_test': False},
            )
    oe_product = {}
    for product in tmp_product:
        oe_product[product.xml_id] = product.id
        oe_product[product.name] = product.id
    print('getting requests and sample products')
    existing_requests = dict([
        (r.ref_num, r)
        for r in get_records(
            OE.sample_request,
            fields=['id','ref_num', 'product_ids'],
            )])
    requests_added = 0
    with dbf.Table(product_lot, dbf_type='clp', default_data_types='enhanced') as access_requests:
        for access_rec in access_requests:
            if dbf.recno(access_rec) == 1:
                continue
            if access_rec.order_id not in existing_requests:
                continue
            if existing_requests[access_rec.order_id].product_ids:
                # already has some, don't add more
                continue
            if not access_rec.prod_desc:
                continue
            requests_added += 1
            prod_xmlid = prod_desc = False
            prod_split = access_rec.prod_desc.split(None, 1)
            if len(prod_split) == 2:
                prod_xmlid, prod_desc = prod_split
            if not prod_xmlid or len(prod_xmlid) != 8 or not prod_xmlid[:3].isalpha() or not prod_xmlid[3:].isnumeric():
                prod_xmlid = False
                prod_desc = access_rec.prod_desc
                product_id = oe_product.get(prod_desc, False)
                if not product_id:
                    product_id = OE.product.create({
                        'name': prod_desc,
                        })
                    oe_product[prod_desc] = product_id
            else:
                product_id = oe_product.get(prod_xmlid, False)
                if not product_id:
                    product_id = OE.product.create({
                        'name': prod_desc,
                        'xml_id': prod_xmlid,
                        'module': 'NVTY',
                        })
                    oe_product[prod_desc] = product_id
                    oe_product[prod_xmlid] = product_id
            assert isinstance(product_id, (int, long)), "product id is not int-like: %r" % (product_id, )
            # at this point we have a product -- so let's make a sample.product
            oe_sample_product = AttrDict(
                    request_id=existing_requests[access_rec.order_id].id,
                    product_id=product_id,
                    )
            sp_id = OE.sample_product.create(dict(oe_sample_product))
            oe_sample_product.id = sp_id
    # now mark all historical records as complete
    request_ids = [
            r.id
            for r in Query(
                OE.sample_request,
                domain=[('is_historical','=',True),('state','=','draft')],
                fields=['id'],
                ).records
                ]
    OE.sample_request.write(request_ids, {'state':'complete'}, context={'sample_loop':True})
    print('%d requests added' % requests_added)
    print('        completed: %5d' % len(request_ids))

OE = AttrDict()

def connect_oe():
    OE.conn = conn = get_connection(hostname=HOST, database=DB, login=USER, password=PW)
    OE.res_partner = conn.get_model('res.partner')
    OE.res_users = conn.get_model('res.users')
    OE.product = conn.get_model('product.product')
    OE.sample_request = conn.get_model('sample.request')
    OE.sample_shipping = conn.get_model('sample.shipping')
    OE.sample_product = conn.get_model('sample.product')
    OE.product_lot = conn.get_model('wholeherb_integration.product_lot')
    OE.crm_lead = conn.get_model('crm.lead')
    global state_recs, country_recs
    print('loading state/country records')
    state_recs = {}
    for r in get_records(OE.conn, 'res.country.state'):
        state_recs[r.country_id, r.name] = r.id
        state_recs[r.country_id, r.code] = r.id
    country_recs = {}
    for r in get_records(OE.conn, 'res.country'):
        country_recs[r.name] = r.id
        country_recs[r.code] = r.id

def csc(city, state, country):
    if country.upper() in ('', 'US', 'USA', 'UNITED STATES', 'UNITED STATES OF AMERICA'):
        country = 'US'
    country_id = country_recs.get(country, False)
    state_id = state_recs.get((country_id, state), False)
    city = [city]
    if state_id is False:
        city.append(state)
    if country_id is False:
        city.append(country)
    city = '  '.join([p for p in city if p])
    return city, state_id, country_id

Main()
